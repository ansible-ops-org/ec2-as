aws --region us-east-1 autoscaling describe-auto-scaling-groups --auto-scaling-group-names test1

aws autoscaling update-auto-scaling-group \
  --auto-scaling-group-name CodeDeployDemo-AS-Group \
  --min-size 2 \
  --max-size 2 \
  --desired-capacity 2


new-scale.yml

First Play
The first play is named “fetching instance details”. This play fetches the EC2 instance details 
of the instances in the Auto Scaling Group (ASG) and registers them to the Ansible inventory.

https://medium.com/@ssksreehari/launching-a-website-in-an-auto-scaling-group-using-dynamic-inventory-in-ansible-75723a3f1443


Tasks:
gathering instance details: This task uses the “amazon.aws.ec2_instance_info” module to fetch the EC2 instance details of instances in the ASG, and filters the instances based 
on their state and tags. The instances that match the filters are registered to the Ansible inventory using the “register” keyword.

creating dynamic inventory: This task uses the “add_host” module to dynamically add the instances that were registered in the previous task 
to the “asg_instances” group in the Ansible inventory. This task sets some necessary SSH connection parameters and specifies the private key file to connect to the instances.
The serial keyword is used to specify the number of hosts to run the playbook on at the same time. 

In this case, serial: 1 is used to run the playbook on each host sequentially, meaning that the tasks in the playbook 
will be executed one at a time on each host instead of running them all simultaneously.





In summary, this Ansible playbook fetches the EC2 instance details of instances in the Auto Scaling Group, registers them to the Ansible inventory, 
installs the necessary packages, configures the Apache web server, and deploys the website files to the document root of the web server. 
This playbook helps automate the process of deploying a website to an Auto Scaling Group using Ansible.
